meta:
  environment: ~

  api_domain: (( concat "api." properties.domain ))

  release:
    name: cf

  logsearch_shipper:
    release:
      name: "logsearch-shipper"

  etcd_consul_service: ["etcd.service.cf.internal"]

  consul_servers: (( grab jobs.consul_z1.networks.cf1.static_ips jobs.consul_z2.networks.cf2.static_ips jobs.consul_z3.networks.cf3.static_ips ))

  nfs_client_ranges:
    - (( grab networks.cf1.subnets.[0].range || nil ))
    - (( grab networks.cf2.subnets.[0].range || nil ))

  nfs_server:
    address: (( grab jobs.nfs_z1.networks.cf1.static_ips.[0] || nil ))
    allow_from_entries: (( grab meta.nfs_client_ranges ))
    share: ~

  api_routes:
  - name: api
    tags:
      component: CloudController
    port: (( grab properties.cc.external_port ))
    uris:
    - (( grab meta.api_domain ))

  api_consul_services:
    cloud_controller_ng: {}

  api_templates:
  - name: cloud_controller_ng
    release: (( grab meta.release.name ))
  - name: metron_agent
    release: (( grab meta.release.name ))
  - name: statsd-injector
    release: (( grab meta.release.name ))
  - name: consul_agent
    release: (( grab meta.consul_templates.consul_agent.release ))
  - name: nfs_mounter
    release: (( grab meta.release.name ))
  - name: route_registrar
    release: (( grab meta.release.name ))
  - release: "logsearch-shipper"
    name: (( grab meta.logsearch_shipper.release.name ))

  api_worker_templates:
  - name: cloud_controller_worker
    release: (( grab meta.release.name ))
  - name: metron_agent
    release: (( grab meta.release.name ))
  - name: consul_agent
    release: (( grab meta.consul_templates.consul_agent.release ))
  - name: nfs_mounter
    release: (( grab meta.release.name ))
  - release: "logsearch-shipper"
    name: (( grab meta.logsearch_shipper.release.name ))

  clock_templates:
  - name: cloud_controller_clock
    release: (( grab meta.release.name ))
  - name: metron_agent
    release: (( grab meta.release.name ))
  - release: "logsearch-shipper"
    name: (( grab meta.logsearch_shipper.release.name ))

  consul_templates:
  - name: consul_agent
    release: (( grab meta.release.name ))
  - name: metron_agent
    release: (( grab meta.release.name ))
  - release: "logsearch-shipper"
    name: (( grab meta.logsearch_shipper.release.name ))

  etcd_templates:
  - name: etcd
    release: etcd
  - name: etcd_metrics_server
    release: etcd
  - name: metron_agent
    release: (( grab meta.release.name ))
  - name: consul_agent
    release: (( grab meta.release.name ))
  - release: "logsearch-shipper"
    name: (( grab meta.logsearch_shipper.release.name ))

  ha_proxy_templates:
  - name: haproxy
    release: (( grab meta.release.name ))
  - name: metron_agent
    release: (( grab meta.release.name ))
  - name: consul_agent
    release: (( grab meta.consul_templates.consul_agent.release ))
  - release: "logsearch-shipper"
    name: (( grab meta.logsearch_shipper.release.name ))

  loggregator_templates:
  - name: doppler
    release: (( grab meta.release.name ))
  - name: syslog_drain_binder
    release: (( grab meta.release.name ))
  - name: metron_agent
    release: (( grab meta.release.name ))
  - name: consul_agent
    release: (( grab meta.consul_templates.consul_agent.release ))
  - release: "logsearch-shipper"
    name: (( grab meta.logsearch_shipper.release.name ))

  loggregator_trafficcontroller_routes:
  - name: doppler
    port: (( grab properties.loggregator.outgoing_dropsonde_port ))
    uris:
    - (( concat "doppler." properties.domain ))
  - name: loggregator
    port: (( grab properties.traffic_controller.outgoing_port ))
    uris:
    - (( concat "loggregator." properties.domain ))


  loggregator_trafficcontroller_templates:
  - name: loggregator_trafficcontroller
    release: (( grab meta.release.name ))
  - name: metron_agent
    release: (( grab meta.release.name ))
  - name: route_registrar
    release: (( grab meta.release.name ))
  - name: consul_agent
    release: (( grab meta.consul_templates.consul_agent.release ))
  - release: "logsearch-shipper"
    name: (( grab meta.logsearch_shipper.release.name ))

  nats_templates:
  - name: nats
    release: (( grab meta.release.name ))
  - name: nats_stream_forwarder
    release: (( grab meta.release.name ))
  - name: metron_agent
    release: (( grab meta.release.name ))
  - name: consul_agent
    release: (( grab meta.consul_templates.consul_agent.release ))

  nfs_templates:
  - name: debian_nfs_server
    release: (( grab meta.release.name ))
  - name: metron_agent
    release: (( grab meta.release.name ))
  - name: consul_agent
    release: (( grab meta.consul_templates.consul_agent.release ))
  - release: "logsearch-shipper"
    name: (( grab meta.logsearch_shipper.release.name ))

  postgres_templates:
  - name: postgres
    release: (( grab meta.release.name ))
  - name: metron_agent
    release: (( grab meta.release.name ))
  - name: consul_agent
    release: (( grab meta.consul_templates.consul_agent.release ))
  - release: "logsearch-shipper"
    name: (( grab meta.logsearch_shipper.release.name ))

  router_templates:
  - name: gorouter
    release: (( grab meta.release.name ))
  - name: metron_agent
    release: (( grab meta.release.name ))
  - name: consul_agent
    release: (( grab meta.consul_templates.consul_agent.release ))
  - release: "logsearch-shipper"
    name: (( grab meta.logsearch_shipper.release.name ))

  stats_templates:
  - name: collector
    release: (( grab meta.release.name ))
  - name: metron_agent
    release: (( grab meta.release.name ))
  - name: consul_agent
    release: (( grab meta.consul_templates.consul_agent.release ))
  - release: "logsearch-shipper"
    name: (( grab meta.logsearch_shipper.release.name ))

  uaa_routes:
  - name: uaa
    port: (( grab properties.uaa.port ))
    tags:
      component: uaa
    uris:
    - (( concat "uaa." properties.domain ))
    - (( concat "*.uaa." properties.domain ))
    - (( concat "login." properties.domain ))
    - (( concat "*.login." properties.domain ))

  uaa_templates:
  - name: uaa
    release: (( grab meta.release.name ))
  - name: metron_agent
    release: (( grab meta.release.name ))
  - name: consul_agent
    release: (( grab meta.consul_templates.consul_agent.release ))
  - name: route_registrar
    release: (( grab meta.release.name ))
  - name: statsd-injector
    release: (( grab meta.release.name ))
  - release: "logsearch-shipper"
    name: (( grab meta.logsearch_shipper.release.name ))

jobs:
  - name: consul_z1
    templates: (( grab meta.consul_templates ))
    instances: 1
    persistent_disk: 1024
    resource_pool: consul_z1
    networks:
      - name: cf1
        static_ips:
    update:
      serial: true
    properties:
      consul:
        agent:
          mode: server
      metron_agent:
        zone: z1

  - name: consul_z2
    templates: (( grab meta.consul_templates ))
    instances: 1
    persistent_disk: 1024
    resource_pool: consul_z2
    networks:
      - name: cf2
        static_ips:
    properties:
      consul:
        agent:
          mode: server
      metron_agent:
        zone: z2

  - name: nats_z1
    templates: (( grab meta.nats_templates ))
    instances: 1
    resource_pool: medium_z1
    networks:
      - name: cf1
        static_ips:
    properties:
      metron_agent:
        zone: z1

  - name: nats_z2
    templates: (( grab meta.nats_templates ))
    instances: 1
    resource_pool: medium_z2
    networks:
      - name: cf2
        static_ips:
    properties:
      metron_agent:
        zone: z2

  - name: etcd_z1
    templates: (( grab meta.etcd_templates ))
    instances: 1
    persistent_disk: 10024
    resource_pool: medium_z1
    networks:
      - name: cf1
        static_ips:
    update:
      serial: true
    properties:
      metron_agent:
        zone: z1
      consul:
        agent:
          services:
            etcd: {}

  - name: consul_z3
    templates: (( grab meta.consul_templates ))
    instances: 1
    persistent_disk: 1024
    resource_pool: consul_z3
    networks:
      - name: cf3
        static_ips:
    properties:
      consul:
        agent:
          mode: server
      metron_agent:
        zone: z3

  - name: etcd_z2
    templates: (( grab meta.etcd_templates ))
    instances: 1
    persistent_disk: 10024
    resource_pool: medium_z2
    networks:
      - name: cf2
        static_ips:
    properties:
      metron_agent:
        zone: z2
      consul:
        agent:
          services:
            etcd: {}

  - name: etcd_z3
    templates: (( grab meta.etcd_templates ))
    instances: 1
    persistent_disk: 10024
    resource_pool: medium_z3
    networks:
      - name: cf3
        static_ips:
    properties:
      metron_agent:
        zone: z3
      consul:
        agent:
          services:
            etcd: {}

  - name: ha_proxy_z1
    templates: (( grab meta.ha_proxy_templates ))
    instances: 0
    resource_pool: router_z1
    networks:
      - name: cf1
        static_ips: ~
    properties:
      ha_proxy:
      router:
        servers:
          z1: (( grab jobs.router_z1.networks.router1.static_ips ))
          z2: (( grab jobs.router_z2.networks.router2.static_ips ))
      metron_agent:
        zone: z1

  - name: stats_z1
    templates: (( grab meta.stats_templates ))
    instances: 1
    resource_pool: small_z1
    networks:
      - name: cf1
    properties:
      metron_agent:
        zone: z1

  - name: nfs_z1
    templates: (( grab meta.nfs_templates ))
    instances: 0
    resource_pool: medium_z1
    persistent_disk: 102400
    networks:
      - name: cf1
        static_ips: ~
    properties:
      metron_agent:
        zone: z1

  - name: postgres_z1
    templates: (( grab meta.postgres_templates ))
    instances: 0
    resource_pool: medium_z1
    persistent_disk: 4096
    networks:
    - name: cf1
      static_ips: ~
    properties:
      metron_agent:
        zone: z1

  - name: uaa_z1
    templates: (( grab meta.uaa_templates ))
    instances: 1
    resource_pool: medium_z1
    networks:
      - name: cf1_rds
    properties:
      consul:
        agent:
          services:
            uaa: {}
      metron_agent:
        zone: z1
      route_registrar:
        routes: (( grab meta.uaa_routes ))
      uaa:
        proxy:
          servers: (( grab jobs.router_z1.networks.router1.static_ips jobs.router_z2.networks.router2.static_ips ))

  - name: uaa_z2
    templates: (( grab meta.uaa_templates ))
    instances: 1
    resource_pool: medium_z2
    networks:
      - name: cf2_rds
    properties:
      consul:
        agent:
          services:
            uaa: {}
      metron_agent:
        zone: z2
      route_registrar:
        routes: (( grab meta.uaa_routes ))
      uaa:
        proxy:
          servers: (( grab jobs.router_z1.networks.router1.static_ips jobs.router_z2.networks.router2.static_ips ))

  - name: api_z1
    templates: (( grab meta.api_templates ))
    instances: 1
    resource_pool: api_z1
    persistent_disk: 0
    networks:
      - name: cf1_rds
    properties:
      consul:
        agent:
          services: (( grab meta.api_consul_services ))
      metron_agent:
        zone: z1
      route_registrar:
        routes: (( grab meta.api_routes ))
      nfs_server: (( grab meta.nfs_server ))

  - name: api_z2
    templates: (( grab meta.api_templates ))
    instances: 1
    resource_pool: api_z2
    persistent_disk: 0
    networks:
      - name: cf2_rds
    properties:
      consul:
        agent:
          services: (( grab meta.api_consul_services ))
      metron_agent:
        zone: z2
      route_registrar:
        routes: (( grab meta.api_routes ))
      nfs_server: (( grab meta.nfs_server ))

  - name: clock_global
    templates: (( grab meta.clock_templates ))
    instances: 1
    resource_pool: medium_z1
    persistent_disk: 0
    networks:
      - name: cf1_rds
    properties:
      metron_agent:
        zone: z1

  - name: api_worker_z1
    templates: (( grab meta.api_worker_templates ))
    instances: 1
    resource_pool: api_z1
    persistent_disk: 0
    networks:
      - name: cf1_rds
    properties:
      metron_agent:
        zone: z1
      nfs_server: (( grab meta.nfs_server ))

  - name: api_worker_z2
    templates: (( grab meta.api_worker_templates ))
    instances: 1
    resource_pool: api_z2
    persistent_disk: 0
    networks:
      - name: cf2_rds
    properties:
      metron_agent:
        zone: z2
      nfs_server: (( grab meta.nfs_server ))

  - name: loggregator_z1
    templates: (( grab meta.loggregator_templates ))
    instances: 0
    resource_pool: medium_z1
    networks:
      - name: cf1
    properties:
      doppler:
        zone: z1
      metron_agent:
        zone: z1

  - name: loggregator_z2
    templates: (( grab meta.loggregator_templates ))
    instances: 0
    resource_pool: medium_z2
    networks:
      - name: cf2
    properties:
      doppler:
        zone: z2
      metron_agent:
        zone: z2

  - name: doppler_z1
    templates: (( grab meta.loggregator_templates ))
    instances: 1
    resource_pool: doppler_z1
    networks:
      - name: cf1
    properties:
      doppler:
        zone: z1
      metron_agent:
        zone: z1

  - name: doppler_z2
    templates: (( grab meta.loggregator_templates ))
    instances: 1
    resource_pool: doppler_z2
    networks:
      - name: cf2
    properties:
      doppler:
        zone: z2
      metron_agent:
        zone: z2

  - name: loggregator_trafficcontroller_z1
    templates: (( grab meta.loggregator_trafficcontroller_templates ))
    instances: 1
    resource_pool: small_z1
    networks:
      - name: cf1
    properties:
      traffic_controller:
        zone: z1
      metron_agent:
        zone: z1
      route_registrar:
        routes: (( grab meta.loggregator_trafficcontroller_routes ))

  - name: loggregator_trafficcontroller_z2
    templates: (( grab meta.loggregator_trafficcontroller_templates ))
    instances: 1
    resource_pool: small_z2
    networks:
      - name: cf2
    properties:
      traffic_controller:
        zone: z2
      metron_agent:
        zone: z2
      route_registrar:
        routes: (( grab meta.loggregator_trafficcontroller_routes ))

  - name: router_z1
    templates: (( grab meta.router_templates ))
    instances: 1
    resource_pool: router_z1
    networks:
      - name: router1
        static_ips: ~
    properties:
      consul:
        agent:
          services:
            gorouter: {}
      metron_agent:
        zone: z1

  - name: router_z2
    templates: (( grab meta.router_templates ))
    instances: 1
    resource_pool: router_z2
    networks:
      - name: router2
        static_ips: ~
    properties:
      consul:
        agent:
          services:
            gorouter: {}
      metron_agent:
        zone: z2

# Diego

  - name: access_z1
    templates: (( grab base_job_templates.access ))
    instances: 0
    resource_pool: access_z1
    networks:
      - name: cf1
    properties:
      metron_agent:
        zone: z1
      consul:
        agent:
          services:
            file_server: {}
            ssh_proxy: {}

  - name: access_z2
    templates: (( grab base_job_templates.access ))
    instances: 0
    resource_pool: access_z2
    networks:
      - name: cf2
    properties:
      metron_agent:
        zone: z2
      consul:
        agent:
          services:
            file_server: {}
            ssh_proxy: {}

  - name: brain_z1
    templates: (( grab base_job_templates.brain ))
    instances: 0
    resource_pool: brain_z1
    networks:
      - name: cf1
    properties:
      consul:
        agent:
          services:
            auctioneer: {}
      metron_agent:
        zone: z1

  - name: brain_z2
    templates: (( grab base_job_templates.brain ))
    instances: 0
    resource_pool: brain_z2
    networks:
      - name: cf2
    properties:
      consul:
        agent:
          services:
            auctioneer: {}
      metron_agent:
        zone: z2

  - name: cc_bridge_z1
    templates: (( grab base_job_templates.cc_bridge ))
    instances: 0
    resource_pool: cc_bridge_z1
    networks:
      - name: cf1
    properties:
      metron_agent:
        zone: z1
      consul:
        agent:
          services:
            cc_uploader: {}
            nsync: {}
            stager: {}
            tps: {}

  - name: cc_bridge_z2
    templates: (( grab base_job_templates.cc_bridge ))
    instances: 0
    resource_pool: cc_bridge_z2
    networks:
      - name: cf2
    properties:
      metron_agent:
        zone: z2
      consul:
        agent:
          services:
            cc_uploader: {}
            nsync: {}
            stager: {}
            tps: {}

  - name: cell_z1
    templates: (( grab base_job_templates.cell ))
    instances: 1
    resource_pool: cell_z1
    networks:
      - name: cell1
    properties:
      metron_agent:
        zone: z1
      diego:
        rep:
          zone: z1

  - name: cell_z2
    templates: (( grab base_job_templates.cell ))
    instances: 1
    resource_pool: cell_z2
    networks:
      - name: cell2
    properties:
      metron_agent:
        zone: z2
      diego:
        rep:
          zone: z2

  - name: colocated_z1
    templates: (( grab base_job_templates.colocated ))
    instances: 1
    persistent_disk_pool: database_disks
    resource_pool: colocated_z1
    networks:
      - name: cf1
    properties:
      consul:
        agent:
          services:
            auctioneer: {}
            bbs: {}
            cc_uploader: {}
            file_server: {}
            nsync: {}
            ssh_proxy: {}
            stager: {}
            tps: {}
      diego:
        rep:
          zone: z1
      metron_agent:
        zone: z1

  - name: colocated_z2
    templates: (( grab base_job_templates.colocated ))
    instances: 1
    persistent_disk_pool: database_disks
    resource_pool: colocated_z2
    networks:
      - name: cf2
    properties:
      consul:
        agent:
          services:
            auctioneer: {}
            bbs: {}
            cc_uploader: {}
            file_server: {}
            nsync: {}
            ssh_proxy: {}
            stager: {}
            tps: {}
      diego:
        rep:
          zone: z2
      metron_agent:
        zone: z2

  - name: database_z1
    templates: (( grab base_job_templates.database ))
    instances: 0
    persistent_disk_pool: database_disks
    resource_pool: database_z1
    networks:
      - name: cf1
    properties:
      consul:
        agent:
          services:
            bbs: {}
      metron_agent:
        zone: z1

  - name: database_z2
    templates: (( grab base_job_templates.database ))
    instances: 0
    persistent_disk_pool: database_disks
    resource_pool: database_z2
    networks:
      - name: cf2
    properties:
      consul:
        agent:
          services:
            bbs: {}
      metron_agent:
        zone: z2

  - name: route_emitter_z1
    templates: (( grab  base_job_templates.route_emitter ))
    instances: 0
    resource_pool: route_emitter_z1
    networks:
      - name: cf1
    properties:
      metron_agent:
        zone: z1

  - name: route_emitter_z2
    templates: (( grab base_job_templates.route_emitter ))
    instances: 0
    resource_pool: route_emitter_z2
    networks:
      - name: cf2
    properties:
      metron_agent:
        zone: z2



properties:
  consul:
    agent:
      log_level:
      servers:
        lan: (( grab meta.consul_servers ))
    ca_cert:
    agent_cert:
    agent_key:
    encrypt_keys: []
    require_ssl:
    server_cert:
    server_key:

  dropsonde:
    enabled: true

  support_address: "http://support.cloudfoundry.com"
  description: null
  ssl:
    skip_cert_verify: true

  disk_quota_enabled: true

  request_timeout_in_seconds: 900

  nats:
    port: 4222
    machines: (( grab jobs.nats_z1.networks.cf1.static_ips jobs.nats_z2.networks.cf2.static_ips ))
    debug: false
    trace: false
    monitor_port: 0
    prof_port: 0

  etcd:
    machines: (( grab jobs.etcd_z1.networks.cf1.static_ips jobs.etcd_z2.networks.cf2.static_ips jobs.etcd_z3.networks.cf3.static_ips ))
    require_ssl: false
    peer_require_ssl: false

  etcd_metrics_server:
    nats:
      machines: (( grab properties.nats.machines ))
      username: (( grab properties.nats.user ))
      password: (( grab properties.nats.password ))

  loggregator:
    etcd:
      machines: (( grab meta.etcd_consul_service ))

  doppler_endpoint:
    shared_secret: (( grab properties.loggregator_endpoint.shared_secret ))

  metron_endpoint:
    shared_secret: (( grab properties.loggregator_endpoint.shared_secret ))

  logger_endpoint: ~

  ha_proxy:

  router:
    enable_ssl: true
    ssl_cert: (( grab secrets.router_internal_cert ))
    ssl_key: (( grab secrets.router_internal_key ))
    cipher_suites: TLS_RSA_WITH_AES_128_CBC_SHA:TLS_RSA_WITH_AES_256_CBC_SHA
    requested_route_registration_interval_in_seconds:
    ssl_skip_validation:
    port:
    status:
      port:
    secure_cookies:
    route_services_secret:
    route_services_secret_decrypt_only:
    route_services_timeout:
    logrotate:
    extra_headers_to_log:
    debug_addr:
    enable_routing_api:

  syslog_daemon_config: ~

  nfs_server: (( grab meta.nfs_server ))

  collector:
